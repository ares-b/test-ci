name: 'Rust Release and Build'
description: 'Reusable action for Rust release and build process'
inputs:
  github_token:
    description: 'GitHub token'
    required: true
  changelog_path:
    description: 'Path to the changelog file'
    default: 'CHANGELOG.md'
    required: false
  release_prefix:
    description: 'Prefix for release branches'
    default: 'release-'
    required: false
  targets:
    description: 'JSON string of Rust build targets'
    required: true
  packages:
    description: 'JSON string of Rust packages to build'
    required: true
  pre_release:
    description: 'Indicates if the release is a pre-release'
    required: false
    default: 'false'
outputs:
  version:
    description: 'Extracted version number from the branch name'
runs:
  using: "composite"
  steps:
    - name: Set up Git
      run: |
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
      shell: bash

    - name: Check for existing pre-release
      id: check_pre_release
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: |
        PRE_RELEASE_TAG=$(gh release list --json tagName,isPrerelease --jq '.[] | select(.isPrerelease==true) | .tagName' || echo "")
        echo "PRE_RELEASE_TAG=$PRE_RELEASE_TAG" >> $GITHUB_ENV
      shell: bash

    - name: Delete pre-release
      if: env.PRE_RELEASE_TAG
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        GH_TOKEN: ${{ inputs.github_token }}
      run: |
        gh release delete ${{ env.PRE_RELEASE_TAG }} --yes
      shell: bash

    - name: Generate changelog and version
      id: cliff
      uses: orhun/git-cliff-action@v3
      with:
        config: Cargo.toml
        args: --bump --github-repo ${{ github.repository }}
      env:
        OUTPUT: ${{ inputs.changelog_path }}
        GITHUB_REPO: ${{ github.repository }}

    - name: Extract version from changelog
      id: extract_version
      run: |
        VERSION=$(grep -oP '(?<=## \[)\d+\.\d+\.\d+' ${{ inputs.changelog_path }} | head -n 1)
        echo "VERSION=$VERSION" >> $GITHUB_ENV
      shell: bash

    - name: Create or update release
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        GH_TOKEN: ${{ inputs.github_token }}
        VERSION: ${{ env.VERSION }}
      run: |
        if [ -z "${VERSION}" ]; then
          echo "Version not found in changelog"
          exit 1
        fi
        NOTES=$(sed -n '/## \['${VERSION}'\]/,/## \[/p' ${{ inputs.changelog_path }} | sed '$d' | sed '1d')
        if [ "${{ inputs.pre_release }}" == "true" ]; then
          gh release create "${VERSION}" --title "${VERSION}" --notes "${NOTES}" --prerelease
        else
          gh release create "${VERSION}" --title "${VERSION}" --notes "${NOTES}"
        fi
      shell: bash

    - name: Process targets and packages
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        GH_TOKEN: ${{ inputs.github_token }}
        VERSION: ${{ env.VERSION }}
      run: |
        targets=$(echo '${{ inputs.targets }}' | jq -r '.[]')
        packages=$(echo '${{ inputs.packages }}' | jq -r '.[]')
        for target in $targets; do
          rustup target add $target
          for package in $packages; do
            cargo build --release --target $target --package $package
            mv target/$target/release/$package "${package}_${target}_${VERSION}"
            gh release upload "${VERSION}" "${package}_${target}_${VERSION}" --clobber
          done
        done
      shell: bash
