name: Rust Prepare Release

on:
  pull_request:
    branches:
      - main
    types:
      - closed
    paths-ignore:
      - 'infrastructure/**'
      - '.github/workflows/infrastructure-cicd.yml'
      - 'DockerFile'

env:
  CARGO_TERM_COLOR: always

jobs:
  rust-prepare-release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Rust CI
        uses: ./.github/actions/rust_ci

      - name: Set Pre-Release Flag
        id: set_pre_release
        run: |
          if [[ "${{ github.event.pull_request.head.ref }}" == release-* ]]; then
            echo "::set-output name=pre_release::false"
          else
            echo "::set-output name=pre_release::true"
          fi

      - name: Rust Release
        uses: ./.github/actions/rust_release
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          changelog_path: 'CHANGELOG.md'
          release_prefix: 'release-'
          targets: '["x86_64-unknown-linux-gnu"]'
          packages: '["test-ci"]'
          pre_release: ${{ steps.set_pre_release.outputs.pre_release }}

  finalize-release:
    needs: rust-prepare-release
    if: ${{ github.event.pull_request.head.ref == 'main' && github.event.pull_request.merged == true && contains(github.event.pull_request.head.ref, 'release-') }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
        shell: bash

      - name: Generate a changelog
        id: cliff
        uses: orhun/git-cliff-action@v3
        with:
          config: Cargo.toml
          args: --bump --github-repo ${{ github.repository }}
        env:
          OUTPUT: CHANGELOG.md
          GITHUB_REPO: ${{ github.repository }}

      - name: Update Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=$(echo "${{ steps.cliff.outputs.version }}")
          NOTES=$(sed -n '/## \['${VERSION:1}'\]/,/## \[/p' ${{ inputs.changelog_path }} | sed '$d' | sed '1d')
          RELEASE_ID=$(gh release view "${VERSION}" --json id -q .id || echo "")

          if [ -n "${RELEASE_ID}" ]; then
            # Update existing pre-release to final release
            gh release edit "${VERSION}" --notes "${NOTES}" --draft=false --prerelease=false
          else
            # Create new release if not found (shouldn't typically happen)
            gh release create "${VERSION}" --title "${VERSION}" --notes "${NOTES}"
          fi

      - name: Process targets and packages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          targets=$(echo '${{ inputs.targets }}' | jq -r '.[]')
          packages=$(echo '${{ inputs.packages }}' | jq -r '.[]')
          for target in $targets; do
            rustup target add $target
            for package in $packages; do
              cargo build --release --target $target --package $package
              mv target/$target/release/$package "${package}_${target}_${VERSION}"
              gh release upload "${VERSION}" "${package}_${target}_${VERSION}" --clobber
            done
          done
        shell: bash
